{"type": "code", "content": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define N 100000  // Number of elements\n#define P 0.05    // False positive probability\n#define M (int)(-(N * log(P)) / (log(2) * log(2)))  // Size of bit array\n#define K (int)(M / N * log(2))  // Number of hash functions\n\nunsigned char bitArray[M / 8 + 1];\n\nvoid setBit(int n) {\n    bitArray[n / 8] |= 1 << (n % 8);\n}\n\nint getBit(int n) {\n    return bitArray[n / 8] & (1 << (n % 8));\n}\n\n// Basic hash functions (for demonstration purposes)\nint hash1(char *str) {\n    int hash = 5381;\n    int c;\n    while ((c = *str++))\n        hash = ((hash << 5) + hash) + c;\n    return abs(hash % M);\n}\n\nint hash2(char *str) {\n    unsigned long hash = 0;\n    int c;\n    while ((c = *str++))\n        hash = c + (hash << 6) + (hash << 16) - hash;\n    return abs(hash % M);\n}\n\nvoid add(char *str) {\n    setBit(hash1(str));\n    setBit(hash2(str));\n    // Add more hash functions if needed\n}\n\nint is_in(char *str) {\n    return getBit(hash1(str)) && getBit(hash2(str));\n    // Check more hash functions if used\n}\n\nint main() {\n    char *testStr = \"testString\";\n    add(testStr);\n\n    if (is_in(testStr)) {\n        printf(\"%s is probably in the set.\\n\", testStr);\n    } else {\n        printf(\"%s is definitely not in the set.\\n\", testStr);\n    }\n\n    return 0;\n}\n```"}